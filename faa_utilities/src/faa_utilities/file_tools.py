import roslib; roslib.load_manifest('faa_utilities')
import rospy

import os
import yaml
import subprocess
import time
from datetime import date
import cv2
import shutil
import numpy


class FileTools(object):

    def __init__(self):
        self.config_path = os.environ['FAA_CONFIG']
        self.data_path = os.environ['FAA_DATA']
        self.bag_ext = ".bag"
        self.bag_prefix = "Bag-"
        self.video_prefix = "Video-"
        self.video_ext = ".mp4"
        self.image_name_base = "image_{count:06d}.png"
        self.image_name_base_bash = "image_%06d.png"
        self.figure_ext = '.png'
        self.figure_prefix = 'Figure-'

        self.tracking_ext = ".txt"
        self.tracking_prefix = "TrackingData-"
        self.walkway_prefix = "Walkway-"
        self.chamber_prefix = "EndChamber-"
        self.raw_prefix = "Raw-"
        self.analyzed_prefix = "Analyzed-"
        self.summarized_prefix = "Summarized-"

        self.walkway_dtype = numpy.dtype([('time_secs', '<u4'),
                                          ('time_nsecs', '<u4'),
                                          ('time_rel', '<f4'),
                                          ('tunnel', '<u2'),
                                          ('fly_x', '<f4'),
                                          ('fly_y', '<f4'),
                                          ('fly_angle', '<f4'),
                                          ])
        self.chamber_dtype = numpy.dtype([('time_secs', '<u4'),
                                          ('time_nsecs', '<u4'),
                                          ('time_rel', '<f4'),
                                          ('status', '|S25'),
                                          ('tunnel', '<u2'),
                                          ('fly_x', '<f4'),
                                          ('fly_y', '<f4'),
                                          ('fly_angle', '<f4'),
                                          ])


    def read_yaml_file(self,filename):
        """
        Reads the given yaml file and returns a dictionary with its contents
        """
        with open(filename,'r') as f:
            yaml_dict = yaml.load(f)
        return yaml_dict

    def write_yaml_file(self,filename,yaml_dict):
        """
        Writes the given dictionary to the specified yaml file.
        """
        with open(filename,'w') as f:
            f.write('\n# Autogenerated file - do not hand edit\n\n')
            yaml.dump(yaml_dict, f, default_flow_style=False)

    def load_numpy_data(self,path):
        with open(path,'r') as fid:
            header = fid.readline().rstrip().split(',')

        dt = numpy.dtype({'names':header,'formats':['S25']*len(header)})
        numpy_data = numpy.loadtxt(path,dtype=dt,delimiter=",",skiprows=1)
        return numpy_data

    def get_time_str(self):
        today = date.today()
        date_str = "{year}-{month}-{day}".format(year=today.year,
                                                 month=today.month,
                                                 day=today.day)
        localtime = time.localtime()
        time_str = "{hour}-{min}-{sec}".format(hour=localtime.tm_hour,
                                               min=localtime.tm_min,
                                               sec=localtime.tm_sec)
        return date_str + '-' + time_str

    def write_image_file(self,image_path,image):
        """
        Writes the given image to the specified image path.
        """
        cv2.imwrite(image_path,image)

    def read_image_file(self,image_filename):
        """
        Returns the image to the specified filename in the experiment set path.
        """
        experiment_set_path = rospy.get_param('/faa_experiment/experiment_set_path')
        image_path = os.path.join(experiment_set_path,image_filename)
        if not os.path.exists(image_path):
            raise RuntimeError(image_path + " not found!")
        image = cv2.imread(image_path,cv2.CV_LOAD_IMAGE_GRAYSCALE)
        return image

    def save_config_params(self,params_name):
        """
        Save parameters to config file for future importing.
        """
        if params_name[0] == '/':
            params_name = params_name[1:]
        params_path = os.path.join(self.config_path,params_name)
        try:
            os.makedirs(params_path)
        except OSError:
            pass
        params = rospy.get_param(os.path.normpath(os.path.join("/",params_name)))
        self.write_yaml_file(os.path.join(params_path,'params.yaml'),params)

    def save_all_data_params(self):
        """
        Save parameters to data file for future reference.
        """
        experiment_path = rospy.get_param('/faa_experiment/experiment_path')
        params = rospy.get_param("/")
        self.write_yaml_file(os.path.join(experiment_path,'params.yaml'),params)

    def create_trial_path(self,trial):
        experiment_path = rospy.get_param('/faa_experiment/experiment_path')
        # trial_list = [d for d in os.listdir(experiment_path) if os.path.isdir(d)]
        # trial_count = len(trial_list)
        # trial_dir = 'Trial' + str(trial_count + 1)
        trial_dir = 'Trial' + str(trial)
        rospy.set_param('/faa_experiment/trial_name',trial_dir)
        trial_name = trial_dir
        trial_path = os.path.join(experiment_path,trial_dir)
        os.mkdir(trial_path)
        rospy.set_param('/faa_experiment/trial_path',trial_path)
        rospy.set_param('/faa_experiment/trial_start_time',self.get_time_str())

    def setup_data_files(self,trial):
        self.create_trial_path(trial)

    def create_experiment_path(self):
        experiment_set_path = self.create_experiment_set_path()
        experiment_list = os.listdir(experiment_set_path)
        previous_experiment_count = 0
        for entry in experiment_list:
            if os.path.isdir(os.path.join(experiment_set_path,entry)):
                previous_experiment_count += 1
        experiment_dir = 'Experiment' + str(previous_experiment_count + 1)
        rospy.set_param('/faa_experiment/experiment_name',experiment_dir)
        experiment_path = os.path.join(experiment_set_path,experiment_dir)
        os.mkdir(experiment_path)
        rospy.set_param('/faa_experiment/experiment_path',experiment_path)
        rospy.set_param('/faa_experiment/experiment_start_time',self.get_time_str())

    def create_experiment_set_path(self):
        today = date.today()
        date_str = "{year}-{month}-{day}".format(year=today.year,
                                                 month=today.month,
                                                 day=today.day)
        rospy.set_param('/faa_experiment/date',date_str)
        experiment_set_path = os.path.join(self.data_path,date_str)
        rospy.set_param('/faa_experiment/experiment_set_path',experiment_set_path)
        try:
            os.makedirs(experiment_set_path)
        except OSError:
            pass
        return experiment_set_path

    def create_images_paths_from_bag_path(self,bag_path,overwrite):
        (temp,ext) = os.path.splitext(bag_path)
        if ext.lower() != '.bag':
            return None
        (bag_dir,file) = os.path.split(bag_path)
        base_dir = os.path.join(bag_dir,"Images")
        if os.path.exists(base_dir):
            if overwrite:
                shutil.rmtree(base_dir)
            else:
                return None
        os.mkdir(base_dir)
        orig_dir = os.path.join(base_dir,"Original")
        os.mkdir(orig_dir)
        bg_dir = os.path.join(base_dir,"Background")
        os.mkdir(bg_dir)
        fg_dir = os.path.join(base_dir,"Foreground")
        os.mkdir(fg_dir)
        images_paths = {}
        images_paths['original'] = os.path.join(orig_dir,self.image_name_base)
        images_paths['background'] = os.path.join(bg_dir,self.image_name_base)
        images_paths['foreground'] = os.path.join(fg_dir,self.image_name_base)
        return images_paths

    def create_figure_path_from_bag_path(self,bag_path):
        (temp,ext) = os.path.splitext(bag_path)
        if ext.lower() != '.bag':
            return None
        figure_path = bag_path.replace(self.bag_ext,self.figure_ext)
        figure_path = figure_path.replace(self.bag_prefix,self.figure_prefix)
        return figure_path

    def get_video_paths(self,bag_path,images_paths):
        (base_dir,bag_file_name) = os.path.split(bag_path)
        (bag_file_name,ext) = os.path.splitext(bag_file_name)
        if ext.lower() != '.bag':
            return

        images_paths_bash = {}
        video_paths = {}
        for path_name in images_paths:
            images_paths_bash[path_name] = images_paths[path_name].replace(self.image_name_base,
                                                                           self.image_name_base_bash)
            if path_name == 'original':
                prefix = self.video_prefix + 'Original-'
            elif path_name == 'background':
                prefix = self.video_prefix + 'Background-'
            elif path_name == 'foreground':
                prefix = self.video_prefix + 'Foreground-'
            video_file_name = bag_file_name.replace(self.bag_prefix,prefix)
            video_file_name += self.video_ext
            video_paths[path_name] = os.path.join(base_dir,video_file_name)

        # images_dir = os.path.join(base_dir,"Images")
        # images_path = os.path.join(images_dir,image_name_base)
        # video_file_name = bag_file_name.replace(self.bag_prefix,self.video_prefix)
        # video_file_name += self.video_ext
        # video_path = os.path.join(base_dir,video_file_name)
        return images_paths_bash,video_paths

    def get_params_from_bag_path(self,bag_path):
        (temp,ext) = os.path.splitext(bag_path)
        if ext.lower() != '.bag':
            return None
        (bag_dir_name,bag_file_name) = os.path.split(bag_path)
        (experiment_dir,trial_dir) = os.path.split(bag_dir_name)
        params_file_name = os.path.join(experiment_dir,'params.yaml')
        params = self.read_yaml_file(params_file_name)
        return params

    def get_raw_data_from_bag_path(self,bag_path):
        (temp,ext) = os.path.splitext(bag_path)
        if ext.lower() != '.bag':
            return None
        raw_data = {}
        data_path = bag_path.replace(self.bag_ext,self.tracking_ext)
        walkway_data_path = data_path.replace(self.bag_prefix,(self.raw_prefix+self.walkway_prefix))
        if not os.path.exists(walkway_data_path):
            return None
        walkway_data = self.load_numpy_data(walkway_data_path)
        raw_data['walkway'] = walkway_data.astype(self.walkway_dtype)
        chamber_data_path = data_path.replace(self.bag_prefix,(self.raw_prefix+self.chamber_prefix))
        if not os.path.exists(chamber_data_path):
            return None
        chamber_data = self.load_numpy_data(chamber_data_path)
        raw_data['chamber'] = chamber_data.astype(self.chamber_dtype)
        return raw_data


# -----------------------------------------------------------------------------
if __name__ == '__main__':
    pass
